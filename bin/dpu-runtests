#!/usr/bin/env python
# Copyright (c) DPU AUTHORS, under the terms and conditions of the GPL-2+
# license.

import time
import thread
import threading

from dpu.suite import TestSuite
from dpu.utils import mkdir, tmpdir


class LockedIterator(object):
    def __init__(self, it):
        self.lock = threading.Lock()
        self.it = it.__iter__()

    def __iter__(self):
        return self

    def next(self):
        self.lock.acquire()
        try:
            return self.it.next()
        finally:
            self.lock.release()


ws = TestSuite(".")
tests = LockedIterator(ws.tests())
t_count = 1
threads = []

class TestJob(threading.Thread):
    def __init__(self, iterator):
        self.iterator = iterator
        threading.Thread.__init__(self)

    def run(self):
        for test in self.iterator:
            print "%s: Running test -- %s" % (self.name, test.name)
            test.run()
            print "%s: Ran test     -- %s" % (self.name, test.name)


for guy in range(0, t_count):
    t = TestJob(tests)
    threads.append(t)

for t in threads:
    t.start()
    time.sleep(0.1)

for t in threads:
    t.join()
