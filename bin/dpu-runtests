#!/usr/bin/env python
# Copyright (c) DPU AUTHORS, under the terms and conditions of the GPL-2+
# license.

import sys
import time
import thread
import argparse
import threading
import datetime as dt
import multiprocessing

from dpu.suite import TestSuite
from dpu.utils import mkdir, tmpdir

cpu_count = multiprocessing.cpu_count()
t_count = (cpu_count * 2)

parser = argparse.ArgumentParser(
    description='Debian Package Unit Testing Framework'
)

parser.add_argument(
    '-j',
    type=int,
    default=t_count,
    help='How many threads to use'
)

parser.add_argument(
    '-s',
    action='store_const',
    const=True,
    default=False
)

parser.add_argument(
    '-t',
    type=str,
    nargs="*",
    default=[],
    help='Which tests to run'
)

parser.add_argument(
    'suite',
    default=".",
    nargs="?",
    help='Path'
)

args = parser.parse_args()

verbose = args.s
t_count = args.j
tsdir = args.suite

class LockedIterator(object):
    def __init__(self, it):
        self.lock = threading.Lock()
        self.it = it.__iter__()

    def __iter__(self):
        return self

    def next(self):
        self.lock.acquire()
        try:
            return self.it.next()
        finally:
            self.lock.release()

ws = TestSuite(tsdir)
tests = ws.tests()

if len(args.t) != 0:
    tests = (ws.get_test(x) for x in args.t)

tests = LockedIterator(tests)

print "Running %s's tests" % (ws.name)

had_failure = False
test_count = 0
threads = []

class TestJob(threading.Thread):
    def __init__(self, iterator):
        self.iterator = iterator
        threading.Thread.__init__(self)

    def run(self):
        global had_failure
        global test_count
        global verbose
        for test in self.iterator:
            test_count += 1
            kwargs = {}
            if verbose:
                kwargs['verbose'] = True

            val = test.run(**kwargs)
            stat = [val[x] for x in val]
            if len(stat) == 0:
                sys.stdout.write(",")
            elif "failed" in stat:
                had_failure = True
                sys.stdout.write("F")
            else:
                sys.stdout.write(".")
            sys.stdout.flush()

started = dt.datetime.now()

for guy in range(0, t_count):
    t = TestJob(tests)
    threads.append(t)

for t in threads:
    t.start()
    time.sleep(0.1)

for t in threads:
    t.join()

ended = dt.datetime.now()

print ""
print "Ran %s tests in %s seconds" % (
    test_count,
    (ended - started).total_seconds()
)

if had_failure:
    sys.exit(1)
else:
    sys.exit(0)
